@page "/customers"
@using MudBlazor
@using frontend.Services
@using frontend.Models
@using frontend.Pages.CustomersPages
@inject ICustomerService CustomerService
@inject IDialogService DialogService

<MudPaper Elevation="2" Class="pa-6" Style="width:100%; max-width:1600px; margin:auto;">
    <!-- Заголовок и кнопка -->
    <div class="customers-header">
        <MudText Typo="Typo.h4" Class="font-weight-bold">Клиенты</MudText>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenCreateDialog"
                   Size="Size.Large"
                   Class="btn-large">
            Новая запись
        </MudButton>
    </div>

    <!-- Поиск -->
    <MudTextField T="string"
                  @bind-Value="searchString"
                  Label="Поиск"
                  Margin="Margin.Dense"
                  Adornment="Adornment.End"
                  Immediate="true"
                  OnKeyUp="@(e => FilterCustomers())"
                  Class="mb-4 full-width" />

    <!-- Контент -->
    @if (!isLoaded)
    {
        <div class="d-flex justify-content-center my-6">
            <MudProgressCircular Indeterminate="true" Size="Size.Medium" Color="Color.Primary" />
        </div>
    }
    else if (filteredCustomers.Count == 0)
    {
        <MudPaper Elevation="1" Class="pa-6 text-center">
            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                Клиенты не найдены
            </MudText>
        </MudPaper>
    }
    else
    {
        <MudTable Items="@filteredCustomers"
            Hover="true"
            Dense="true"
            Striped="true"
            Class="elevation-1 rounded-lg full-width customers-table">

            <HeaderContent>
                <MudTh>Имя</MudTh>
                <MudTh>Организация</MudTh>
                <MudTh>Электронная почта</MudTh>
                <MudTh>Телефон</MudTh>
                <MudTh Class="text-center">Действия</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Organization</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>@context.Phone</MudTd>
                <MudTd Class="text-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Info"
                                   Size="Size.Small"
                                   OnClick="@(e => OpenEditDialog(context))"
                                   Title="Редактировать" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   OnClick="@(e => OpenDeleteDialog(context))"
                                   Title="Удалить" />
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 25, 50}" 
                               RowsPerPageString="Записей на странице:"
                               OfText="из"
                               AllItemsText="Все" />
            </PagerContent>
        </MudTable>
    }
</MudPaper>

@code {
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private string searchString = "";
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomersAsync();
    }

    private async Task LoadCustomersAsync()
    {
        isLoaded = false;

        try
        {
            var customerList = await CustomerService.GetCustomersAsync();
            if (customerList is not null)
            {
                customers = customerList.ToList();
                FilterCustomers();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки клиентов: {ex.Message}");
        }
        finally
        {
            isLoaded = true;
        }
    }

    private void FilterCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredCustomers = customers;
            return;
        }

        filteredCustomers = customers.Where(c =>
                (c.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.Organization?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.Email?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false))
            .ToList();
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters<CreateCustomerDialog>
        {
            { x => x.Customer, new Customer() }
        };

        var options = new DialogOptions {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
            };
        var dialog = DialogService.Show<CreateCustomerDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadCustomersAsync();
    }

    private async Task OpenEditDialog(Customer customer)
    {
        var parameters = new DialogParameters<EditCustomerDialog>
        {
            { x => x.Customer, customer }
        };

        var options = new DialogOptions {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
            };
        var dialog = DialogService.Show<EditCustomerDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadCustomersAsync();
    }

    private async Task OpenDeleteDialog(Customer customer)
    {
        var parameters = new DialogParameters<DeleteConfirmationDialog>
        {
            { x => x.ContentText, $"Вы уверены, что хотите удалить клиента '{customer.Name}'?" },
            { x => x.ButtonText, "Удалить" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
            };
        var dialog = DialogService.Show<DeleteConfirmationDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var success = await CustomerService.DeleteCustomerAsync(customer.Id);
            if (success)
            {
                customers.Remove(customer);
                FilterCustomers();
            }
            else
            {
                Console.WriteLine("Не удалось удалить клиента");
            }
        }
    }
}