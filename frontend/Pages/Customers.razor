@page "/customers"
@using MudBlazor
@using frontend.Services
@using frontend.Models
@inject ICustomerService CustomerService
@inject NavigationManager Navigation

<MudGrid>
    <MudItem xs="12" md="6">
        <MudTextField T="string" @bind-Value="searchString" Label="Поиск" 
                      Variant="Variant.Outlined" Adornment="Adornment.End" 
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentIconClicked="FilterCustomers" />
    </MudItem>
    <MudItem xs="12" md="6" Class="text-end">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenCreateDialog">
            New Customer
        </MudButton>
    </MudItem>
</MudGrid>

@if (!isLoaded)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudTable Items="@filteredCustomers" Hover="true" Dense="true" Striped="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Organization</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Phone</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Organization</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.Phone</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" 
                               OnClick="@(e => OpenEditDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" 
                               OnClick="@(e => OpenDeleteDialog(context))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 25, 50}" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private string searchString = "";
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomersAsync();
    }


    private async Task LoadCustomersAsync()
    {
        isLoaded = false;
        StateHasChanged();
        
        try
        {
            var customerList = await CustomerService.GetCustomersAsync();
            if (customerList != null)
            {
                customers = customerList.ToList();
                FilterCustomers();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки клиентов: {ex.Message}");
        }
        finally
        {
            isLoaded = true;
            StateHasChanged();
        }
    }

    private void FilterCustomers()
    {
        if (string.IsNullOrEmpty(searchString))
        {
            filteredCustomers = customers;
        }
        else
        {
            filteredCustomers = customers.Where(c => 
                c.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                c.Organization.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                c.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        StateHasChanged();
    }

    private void OpenCreateDialog()
    {
        // Логика открытия диалога создания клиента
    }

    private void OpenEditDialog(Customer customer)
    {
        // Логика открытия диалога редактирования клиента
    }

    private void OpenDeleteDialog(Customer customer)
    {
        // Логика открытия диалога удаления клиента
    }

}